geom_point(shape=16, colour = "Black") +
scale_x_discrete(labels=c("Full assembly", "26 scaffolds")) +
ylab(label = "Percentage of reads mapping uniquely") +
xlab(label = "") + theme(legend.position="none")
ggplot(map_rates2_m, aes(x = variable, y = value, color = variable, fill =variable)) +
geom_boxplot() +
scale_fill_brewer(palette="Dark2") +
geom_point(shape=16, colour = "Black") +
scale_x_discrete(labels=c("Full assembly", "26 scaffolds")) +
ylab(label = "Percentage of reads mapping uniquely") +
xlab(label = "") + theme(legend.position="none")
ggplot(map_rates2_m, aes(x = variable, y = value, color = variable, fill =variable)) +
geom_boxplot() +
scale_fill_brewer(palette="Dark2") +
scale_x_discrete(labels=c("Full assembly", "26 scaffolds")) +
ylab(label = "Percentage of reads mapping uniquely") +
xlab(label = "") + theme(legend.position="none")
ggplot(map_rates2_m, aes(x = variable, y = value, fill =variable)) +
geom_boxplot() +
scale_fill_brewer(palette="Dark2") +
geom_point(shape=16, colour = "Black") +
scale_x_discrete(labels=c("Full assembly", "26 scaffolds")) +
ylab(label = "Percentage of reads mapping uniquely") +
xlab(label = "") + theme(legend.position="none")
View(r)
survival_rates2 <- cbind(t[,c(1,17)], r[,c(17)])
colnames(survival_rates2) <- c("sample", "surv_rates_all", "surv_rates_26")
library(reshape2)
survival_rates2_m <-melt(survival_rates2, id.vars = c("sample"))
library(ggplot2)
ggplot(survival_rates2_m, aes(x = variable, y = value, fill =variable)) +
geom_boxplot() +
scale_fill_brewer(palette="Dark2") +
geom_point(shape=16, colour = "Black") +
scale_x_discrete(labels=c("Full assembly", "26 scaffolds")) +
ylab(label = "Percentage of reads mapping uniquely") +
xlab(label = "") + theme(legend.position="none")
multi_rates2 <- cbind(t[,c(1,15)], r[,c(15)])
colnames(multi_rates2) <- c("sample", "multi_rates_all", "multi_rates_26")
library(reshape2)
multi_rates2_m <-melt(multi_rates2, id.vars = c("sample"))
library(ggplot2)
ggplot(multi_rates2_m, aes(x = variable, y = value, fill =variable)) +
geom_boxplot() +
scale_fill_brewer(palette="Dark2") +
geom_point(shape=16, colour = "Black") +
scale_x_discrete(labels=c("Full assembly", "26 scaffolds")) +
ylab(label = "Percentage of reads mapping uniquely") +
xlab(label = "") + theme(legend.position="none")
ggplot(survival_rates2_m, aes(x = variable, y = value, fill =variable)) +
geom_boxplot() +
scale_fill_brewer(palette="Dark2") +
geom_point(shape=16, colour = "Black") +
scale_x_discrete(labels=c("Full assembly", "26 scaffolds")) +
ylab(label = "Percentage of reads with MQ > 20") +
xlab(label = "") + theme(legend.position="none")
mean(t$surviving_MQ)
mean(t$reads_surviving_MQ_p)
mean(r$reads_surviving_MQ_p)
mean(t$multimapping_p)
mean(r$multimapping_p)
mean(t$unmapped_p)
mean(r$unmapped_p)
r <- read.table("bio-info_phd/alignment_report_Tlei_Bowtie2_26scaffolds.txt", header = T)
r$mapping_rate <- (r$reads_mapped/(r$reads_total))*100
r$uniq_mapping_rate <- (r$uniquely_mapped/(r$reads_total))*100
r$multimapping_reads <- (r$reads_mapped - r$uniquely_mapped)
r$multimapping_p <- (r$multimapping_reads/(r$reads_total))*100
r$unmapped_p <- (r$reads_unmapped/(r$reads_total))*100
r$reads_surviving_MQ_p <- (r$surviving_MQ/(r$reads_total))*100
View(r)
mean(r$reads_total)
mean(r$surviving_MQ)
mean(r$multimapping_p)
mean(r$unmapped_p)
mean(r$error_rate)
mean(r$duplication_per)
mean(r$uniquely_mapped_p)
mean(r$uniq_mapping_rate)
mean(r$reads_surviving_MQ_p)
t <- read.table("bio-info_phd/alignment_report_Tlei_Bowtie2.txt", header = T)
t$mapping_rate <- (t$reads_mapped/(t$reads_total))*100
t$uniq_mapping_rate <- (t$uniquely_mapped/(t$reads_total))*100
t$multimapping_reads <- (t$reads_mapped - t$uniquely_mapped)
t$multimapping_p <- (t$multimapping_reads/(t$reads_total))*100
t$unmapped_p <- (t$reads_unmapped/(t$reads_total))*100
t$reads_surviving_MQ_p <- (t$surviving_MQ/(t$reads_total))*100
mean(t$surviving_MQ)
mean(t$reads_surviving_MQ_p)
View(t)
View(r)
mean(t$surviving_MQ)
mean(t$uniq_mapping_rate)
mean(t$multimapping_p)
mean(t$unmapped_p)
mean(t$error_rate)
mean(t$duplication_per)
r <- read.table("bio-info_phd/alignment_report_Tlei_Bowtie2_26scaffolds.txt", header = T)
species <- substr(r$ind, 3, 5)
r$species <- species
r$mapping_rate <- (r$reads_mapped/(r$reads_total))*100
r$uniq_mapping_rate <- (r$uniquely_mapped/(r$reads_total))*100
r$multimapping_reads <- (r$reads_mapped - r$uniquely_mapped)
r$multimapping_p <- (r$multimapping_reads/(r$reads_total))*100
r$unmapped_p <- (r$reads_unmapped/(r$reads_total))*100
r$reads_surviving_MQ_p <- (r$surviving_MQ/(r$reads_total))*100
# Make boxplots of mapping rates
# Make color palette
library(RColorBrewer)
nb.cols <- 22
mycolors <- colorRampPalette(brewer.pal(8, "Dark2"))(nb.cols)
r$species <- species
View(r)
species <- substr(r$ind, 3, 5)
r$species <- species
View(r)
species
r$species
# Same for survival rate (high quality, uniquely mapping reads)
survival_counts <- cbind(r[,c(1,12,10)])
View(survival_counts)
colnames(survival_rates) <- c("sample", "species", "Survival_reads")
colnames(survival_counts) <- c("sample", "species", "Survival_reads")
ggplot(survival_counts, aes(x = species, y = Survival_rate, color = species)) +
geom_boxplot() +
geom_jitter(shape=16, position=position_jitter(0.2)) +
ylab(label = "Percentage of reads with MQ > 20 to T.lei assembly") +
xlab(label = "Species") +
theme(legend.position="none") +
scale_fill_manual(values = mycolors) +
scale_color_manual(values = mycolors)
# Make boxplots of uniquely mapping rates
library(ggplot2)
ggplot(survival_counts, aes(x = species, y = Survival_rate, color = species)) +
geom_boxplot() +
geom_jitter(shape=16, position=position_jitter(0.2)) +
ylab(label = "Percentage of reads with MQ > 20 to T.lei assembly") +
xlab(label = "Species") +
theme(legend.position="none") +
scale_fill_manual(values = mycolors) +
scale_color_manual(values = mycolors)
ggplot(survival_counts, aes(x = species, y = Survival_reads, color = species)) +
geom_boxplot() +
geom_jitter(shape=16, position=position_jitter(0.2)) +
ylab(label = "Percentage of reads with MQ > 20 to T.lei assembly") +
xlab(label = "Species") +
theme(legend.position="none") +
scale_fill_manual(values = mycolors) +
scale_color_manual(values = mycolors)
ggplot(survival_counts, aes(x = species, y = Survival_reads, color = species)) +
geom_boxplot() +
geom_jitter(shape=16, position=position_jitter(0.2)) +
ylab(label = "Number of reads with MQ > 20 to T.lei26 assembly") +
xlab(label = "Species") +
theme(legend.position="none") +
scale_fill_manual(values = mycolors) +
scale_color_manual(values = mycolors)
r <- read.table("bio-info_phd/alignment_report_Tlei_Bowtie2_26scaffolds.txt", header = T)
View(r)
species <- substr(r$ind, 3, 5)
r$species <- species
r$mapping_rate <- (r$reads_mapped/(r$reads_total))*100
r$uniq_mapping_rate <- (r$uniquely_mapped/(r$reads_total))*100
r$multimapping_reads <- (r$reads_mapped - r$uniquely_mapped)
r$multimapping_p <- (r$multimapping_reads/(r$reads_total))*100
r$unmapped_p <- (r$reads_unmapped/(r$reads_total))*100
r$reads_surviving_MQ_p <- (r$surviving_MQ/(r$reads_total))*100
r$reads_surviving_not_DP <- r$surviving_MQ*(1-r$duplication_per)
mmean(r$reads_surviving_not_DP)
mean(r$reads_surviving_not_DP)
library(ggplot2)
## To remove individuals with low data quality / amount
boxplot(r$reads_surviving_not_DP)
ggplot(r, aes(x = "", y = reads_surviving_not_DP,)) +
geom_boxplot()
ggplot(r, aes(x = "", y = reads_surviving_not_DP,)) +
geom_boxplot()  +
geom_point(shape=16, colour = "Black") +
ylab(label = "Number of non-duplicate, surviving reads") +
xlab(label = "") + theme(legend.position="none")
ggplot(r, aes(x = "", y = reads_surviving_not_DP,)) +
geom_boxplot()  +
geom_point(shape=16, colour = "Black") +
ylab(label = "Number of non-duplicate, surviving reads") +
geom_line(y = 500000)
ggplot(r, aes(x = "", y = reads_surviving_not_DP,)) +
geom_boxplot()  +
geom_point(shape=16, colour = "Black") +
ylab(label = "Number of non-duplicate, surviving reads") +
geom_hline(yintercept=500000) +
xlab(label = "") + theme(legend.position="none")
ggplot(r, aes(x = "", y = reads_surviving_not_DP,)) +
geom_boxplot()  +
geom_jitter(shape=16, colour = "Black") +
ylab(label = "Number of non-duplicate, surviving reads") +
geom_hline(yintercept=500000) +
xlab(label = "") + theme(legend.position="none")
pacman::p_load("circlize", "stringr", "RColorBrewer")
#setwd("/home/clara/Documents/GitHub/Tillandsia-compgenomics/I. Circular figure")
setwd('/Users/clara/Documents/GitHub/Tillandsia-compgenomics/I. Circular figure')
# Read in the complete list of chromosomes with all needed info:
chrom <- read.table("../chromosomes_Tfas_Tlei.coordinates-circle.txt.no-Tlei_chr2526", header = T, sep = "\t")
#setwd("/home/clara/Documents/GitHub/Tillandsia-compgenomics/I. Circular figure")
setwd('/Users/clara/Documents/GitHub/Tillandsia-compgenomics/I. Circular figure/Supp_DE_density/')
# Read in the complete list of chromosomes with all needed info:
chrom <- read.table("../chromosomes_Tfas_Tlei.coordinates-circle.txt.no-Tlei_chr2526", header = T, sep = "\t")
# Make matrix of start and end position to initialize the circular plot
pos <- cbind(rep(0, dim(chrom)[1]), chrom$size)
circos.clear()
# Plot initialization
circos.par("track.height"=0.05, cell.padding=c(0.02, 0, 0.02, 0),
start.degree=90,gap.degree=1.5,points.overflow.warning=FALSE,
track.margin=c(0,0))
circos.initialize(sectors = chrom$name, xlim = pos)
# Add blocks representing the chromosomes
circos.track(chrom$name, ylim = c(0, 1), bg.border = "white", track.height = .05)
# Add chromosome names
is.even <- function(x) x %% 2 == 0
n = 0
m = 0
for (i in 1:nrow(chrom)){
name=chrom[i,1]
if (is.even(i) == TRUE){
if (chrom[i,3] == "Tfas") {
circos.text(chrom$size/2 - n, 1.1, str_split(name, "_")[[1]][2], sector.index=name,
col="olivedrab",cex=0.7, facing = "inside", niceFacing = T)
n = n + 220000
if (i > 21 & i < 26){
n = n + 600000
}
} else {
circos.text(chrom$size - n, 1.1, str_split(name, "_")[[1]][2], sector.index=name,
col="darkgreen",cex=0.7, facing = "inside", niceFacing = T)
n = n + 20000
if (i > 38){
n = n + 2400000
}
}
} else {
if ((i > 23 & i < 26) | i > 45){
if (chrom[i,3] == "Tfas") {
circos.text(chrom$size/2 - n, 2.2, str_split(name, "_")[[1]][2], sector.index=name,
col="olivedrab",cex=0.7, facing = "inside", niceFacing = T)
n = n + 600000
} else {
circos.text(chrom$size - n, 2.2, str_split(name, "_")[[1]][2], sector.index=name,
col="darkgreen",cex=0.7, facing = "inside", niceFacing = T)
n = n + 600000
}
} else {
if (chrom[i,3] == "Tfas") {
circos.text(chrom$size/2 - n , 1.1, str_split(name, "_")[[1]][2], sector.index=name,
col="olivedrab",cex=0.7, facing = "inside", niceFacing = T)
n = n + 220000
} else {
circos.text(chrom$size - n, 1.1, str_split(name, "_")[[1]][2], sector.index=name,
col="darkgreen",cex=0.7, facing = "inside", niceFacing = T)
n = n + 20000
if (i > 38){
n = n + 2400000
}
}
}
}
}
# Add species lines
draw.sector(90, 299, rou1 = 1.05, rou2 = 1.06, col = "olivedrab", border="NA")
draw.sector(298, 91, rou1 = 1.05, rou2 = 1.06, col = "darkgreen", border="NA")
circos.text(chrom$size/2, 6, "T. fasciculata", sector.index="Tfas_chr11",col="olivedrab",cex=1, facing = "bending.inside")
circos.text(chrom$size/2, 6, "T. leiboldiana", sector.index="Tlei_chr11",col="darkgreen",cex=1, facing = "bending.inside")
DE_genes <- read.table("DE_genes_Tfas-Tlei.txt.no-Tlei_chr2526", header = T)
DE_genes_density <- read.table("DE_genes_Tfas-Tlei.txt.no-Tlei_chr2526.PER-WINDOW.txt", header = T, sep = "\t")
View(DE_genes)
View(DE_genes_density)
#DE_genes_density <- read.table(args[[4]], header = T)
DE_genes <- DE_genes[,c(2:4)]
View(DE_genes)
color_de_density <- c(Tfas_chr1 = "olivedrab3", Tfas_chr2 = "olivedrab3", Tfas_chr3 = "olivedrab3",
Tfas_chr4 = "olivedrab3", Tfas_chr5 = "olivedrab3", Tfas_chr6 = "olivedrab3",
Tfas_chr7 = "olivedrab3", Tfas_chr8 = "olivedrab3", Tfas_chr9 = "olivedrab3",
Tfas_chr10 = "olivedrab3", Tfas_chr11 = "olivedrab3", Tfas_chr12 = "olivedrab3",
Tfas_chr13 = "olivedrab3", Tfas_chr14 = "olivedrab3", Tfas_chr15 = "olivedrab3",
Tfas_chr16 = "olivedrab3", Tfas_chr17 = "olivedrab3", Tfas_chr18 = "olivedrab3",
Tfas_chr19 = "olivedrab3", Tfas_chr20 = "olivedrab3", Tfas_chr21 = "olivedrab3",
Tfas_chr22 = "olivedrab3", Tfas_chr23 = "olivedrab3", Tfas_chr24 = "olivedrab3",
Tfas_chr25 = "olivedrab3", Tlei_chr1 = "forestgreen", Tlei_chr2 = "forestgreen",
Tlei_chr3 = "forestgreen", Tlei_chr4 = "forestgreen", Tlei_chr5 = "forestgreen",
Tlei_chr6 = "forestgreen", Tlei_chr7 = "forestgreen", Tlei_chr8 = "forestgreen",
Tlei_chr9 = "forestgreen", Tlei_chr10 = "forestgreen", Tlei_chr11 = "forestgreen",
Tlei_chr12 = "forestgreen", Tlei_chr13 = "forestgreen", Tlei_chr14 = "forestgreen",
Tlei_chr15 = "forestgreen",Tlei_chr16 = "forestgreen", Tlei_chr17 = "forestgreen",
Tlei_chr18 = "forestgreen",Tlei_chr19 = "forestgreen", Tlei_chr20 = "forestgreen",
Tlei_chr21 = "forestgreen",Tlei_chr22 = "forestgreen", Tlei_chr23 = "forestgreen",
Tlei_chr24 = "forestgreen")
circos.track(DE_genes_density$chrom, y = DE_genes_density$DE_counts,
x = DE_genes_density$start_window, ylim = c(0,7.5),
bg.col = "grey92", panel.fun = function(x, y) {
circos.lines(x, y, area = T, col = color_de_density[CELL_META$sector.index],
lwd = .8)
circos.yaxis(c("left"), sector.index = "Tfas_chr1", labels = T, at = seq(0, CELL_META$ylim[2], by = 2.5),
labels.cex = 0.25, labels.col="khaki4", tick.length = 2)
}, track.height = 0.12, bg.border = "black")
circos.clear()
# Plot initialization
circos.par("track.height"=0.05, cell.padding=c(0.02, 0, 0.02, 0),
start.degree=90,gap.degree=1.5,points.overflow.warning=FALSE,
track.margin=c(0,0))
circos.initialize(sectors = chrom$name, xlim = pos)
# Add blocks representing the chromosomes
circos.track(chrom$name, ylim = c(0, 1), bg.border = "white", track.height = .05)
# Add chromosome names
is.even <- function(x) x %% 2 == 0
n = 0
m = 0
for (i in 1:nrow(chrom)){
name=chrom[i,1]
if (is.even(i) == TRUE){
if (chrom[i,3] == "Tfas") {
circos.text(chrom$size/2 - n, 1.1, str_split(name, "_")[[1]][2], sector.index=name,
col="olivedrab",cex=0.7, facing = "inside", niceFacing = T)
n = n + 220000
if (i > 21 & i < 26){
n = n + 600000
}
} else {
circos.text(chrom$size - n, 1.1, str_split(name, "_")[[1]][2], sector.index=name,
col="darkgreen",cex=0.7, facing = "inside", niceFacing = T)
n = n + 20000
if (i > 38){
n = n + 2400000
}
}
} else {
if ((i > 23 & i < 26) | i > 45){
if (chrom[i,3] == "Tfas") {
circos.text(chrom$size/2 - n, 2.2, str_split(name, "_")[[1]][2], sector.index=name,
col="olivedrab",cex=0.7, facing = "inside", niceFacing = T)
n = n + 600000
} else {
circos.text(chrom$size - n, 2.2, str_split(name, "_")[[1]][2], sector.index=name,
col="darkgreen",cex=0.7, facing = "inside", niceFacing = T)
n = n + 600000
}
} else {
if (chrom[i,3] == "Tfas") {
circos.text(chrom$size/2 - n , 1.1, str_split(name, "_")[[1]][2], sector.index=name,
col="olivedrab",cex=0.7, facing = "inside", niceFacing = T)
n = n + 220000
} else {
circos.text(chrom$size - n, 1.1, str_split(name, "_")[[1]][2], sector.index=name,
col="darkgreen",cex=0.7, facing = "inside", niceFacing = T)
n = n + 20000
if (i > 38){
n = n + 2400000
}
}
}
}
}
# Add species lines
draw.sector(90, 299, rou1 = 1.05, rou2 = 1.06, col = "olivedrab", border="NA")
draw.sector(298, 91, rou1 = 1.05, rou2 = 1.06, col = "darkgreen", border="NA")
circos.text(chrom$size/2, 6, "T. fasciculata", sector.index="Tfas_chr11",col="olivedrab",cex=1, facing = "bending.inside")
circos.text(chrom$size/2, 6, "T. leiboldiana", sector.index="Tlei_chr11",col="darkgreen",cex=1, facing = "bending.inside")
circos.track(DE_genes_density$chrom, y = DE_genes_density$proportion,
x = DE_genes_density$start_window, ylim = c(0,7.5),
bg.col = "grey92", panel.fun = function(x, y) {
circos.lines(x, y, area = T, col = color_de_density[CELL_META$sector.index],
lwd = .8)
circos.yaxis(c("left"), sector.index = "Tfas_chr1", labels = T, at = seq(0, CELL_META$ylim[2], by = 2.5),
labels.cex = 0.25, labels.col="khaki4", tick.length = 2)
}, track.height = 0.12, bg.border = "black")
circos.clear()
# Plot initialization
circos.par("track.height"=0.05, cell.padding=c(0.02, 0, 0.02, 0),
start.degree=90,gap.degree=1.5,points.overflow.warning=FALSE,
track.margin=c(0,0))
circos.initialize(sectors = chrom$name, xlim = pos)
# Add blocks representing the chromosomes
circos.track(chrom$name, ylim = c(0, 1), bg.border = "white", track.height = .05)
# Add chromosome names
is.even <- function(x) x %% 2 == 0
n = 0
m = 0
for (i in 1:nrow(chrom)){
name=chrom[i,1]
if (is.even(i) == TRUE){
if (chrom[i,3] == "Tfas") {
circos.text(chrom$size/2 - n, 1.1, str_split(name, "_")[[1]][2], sector.index=name,
col="olivedrab",cex=0.7, facing = "inside", niceFacing = T)
n = n + 220000
if (i > 21 & i < 26){
n = n + 600000
}
} else {
circos.text(chrom$size - n, 1.1, str_split(name, "_")[[1]][2], sector.index=name,
col="darkgreen",cex=0.7, facing = "inside", niceFacing = T)
n = n + 20000
if (i > 38){
n = n + 2400000
}
}
} else {
if ((i > 23 & i < 26) | i > 45){
if (chrom[i,3] == "Tfas") {
circos.text(chrom$size/2 - n, 2.2, str_split(name, "_")[[1]][2], sector.index=name,
col="olivedrab",cex=0.7, facing = "inside", niceFacing = T)
n = n + 600000
} else {
circos.text(chrom$size - n, 2.2, str_split(name, "_")[[1]][2], sector.index=name,
col="darkgreen",cex=0.7, facing = "inside", niceFacing = T)
n = n + 600000
}
} else {
if (chrom[i,3] == "Tfas") {
circos.text(chrom$size/2 - n , 1.1, str_split(name, "_")[[1]][2], sector.index=name,
col="olivedrab",cex=0.7, facing = "inside", niceFacing = T)
n = n + 220000
} else {
circos.text(chrom$size - n, 1.1, str_split(name, "_")[[1]][2], sector.index=name,
col="darkgreen",cex=0.7, facing = "inside", niceFacing = T)
n = n + 20000
if (i > 38){
n = n + 2400000
}
}
}
}
}
# Add species lines
draw.sector(90, 299, rou1 = 1.05, rou2 = 1.06, col = "olivedrab", border="NA")
draw.sector(298, 91, rou1 = 1.05, rou2 = 1.06, col = "darkgreen", border="NA")
circos.text(chrom$size/2, 6, "T. fasciculata", sector.index="Tfas_chr11",col="olivedrab",cex=1, facing = "bending.inside")
circos.text(chrom$size/2, 6, "T. leiboldiana", sector.index="Tlei_chr11",col="darkgreen",cex=1, facing = "bending.inside")
circos.track(DE_genes_density$chrom, y = DE_genes_density$proportion,
x = DE_genes_density$start_window, ylim = c(0,1),
bg.col = "grey92", panel.fun = function(x, y) {
circos.lines(x, y, area = T, col = color_de_density[CELL_META$sector.index],
lwd = .8)
circos.yaxis(c("left"), sector.index = "Tfas_chr1", labels = T, at = seq(0, CELL_META$ylim[2], by = 2.5),
labels.cex = 0.25, labels.col="khaki4", tick.length = 2)
}, track.height = 0.12, bg.border = "black")
View(chrom)
chrom$species <- c(rep(c("Tfas"), 25), rep(c("Tlei"), 26))
# Read in the complete list of chromosomes with all needed info:
chrom <- read.table("../chromosomes_Tfas_Tlei.coordinates-circle.txt", header = T, sep = "\t")
chrom$species <- c(rep(c("Tfas"), 25), rep(c("Tlei"), 26))
Tfas_chrom <- chrom[chrom$species=="Tfas",]
Tlei_chrom <- chrom[chrom$species=="Tlei",]
# Make matrix of start and end position to initialize the circular plot
pos <- cbind(rep(0, dim(chrom)[1]), Tfas_chrom$size)
circos.clear()
# Plot initialization
circos.par("track.height"=0.05, cell.padding=c(0.02, 0, 0.02, 0),
start.degree=90,gap.degree=1.5,points.overflow.warning=FALSE,
track.margin=c(0,0))
circos.initialize(sectors = Tfas_chrom$name, xlim = pos)
View(pos)
# Make matrix of start and end position to initialize the circular plot
pos <- cbind(rep(0, dim(Tfas_chrom)[1]), Tfas_chrom$size)
# Plot initialization
circos.par("track.height"=0.05, cell.padding=c(0.02, 0, 0.02, 0),
start.degree=90,gap.degree=1.5,points.overflow.warning=FALSE,
track.margin=c(0,0))
circos.clear()
# Plot initialization
circos.par("track.height"=0.05, cell.padding=c(0.02, 0, 0.02, 0),
start.degree=90,gap.degree=1.5,points.overflow.warning=FALSE,
track.margin=c(0,0))
circos.initialize(sectors = Tfas_chrom$name, xlim = pos)
# Add blocks representing the chromosomes
circos.track(Tfas_chrom$name, ylim = c(0, 1), bg.border = "white", track.height = .05)
# Add chromosome names
is.even <- function(x) x %% 2 == 0
n = 0
m = 0
for (i in 1:nrow(Tfas_chrom)){
name=Tfas_chrom[i,1]
if (is.even(i) == TRUE){
circos.text(chrom$size/2 - n, 1.1, str_split(name, "_")[[1]][2], sector.index=name,
col="olivedrab",cex=0.7, facing = "inside", niceFacing = T)
n = n + 220000
if (i > 21 & i < 26){
n = n + 600000
}
}
} else {
for (i in 1:nrow(Tfas_chrom)){
name=Tfas_chrom[i,1]
if (is.even(i) == TRUE){
circos.text(chrom$size/2 - n, 1.1, str_split(name, "_")[[1]][2], sector.index=name,
col="olivedrab",cex=0.7, facing = "inside", niceFacing = T)
n = n + 220000
if (i > 21 & i < 26){
n = n + 600000
}
} else {
if ((i > 23 & i < 26) | i > 45){
circos.text(chrom$size/2 - n, 2.2, str_split(name, "_")[[1]][2], sector.index=name,
col="olivedrab",cex=0.7, facing = "inside", niceFacing = T)
n = n + 600000
} else {
circos.text(chrom$size/2 - n , 1.1, str_split(name, "_")[[1]][2], sector.index=name,
col="olivedrab",cex=0.7, facing = "inside", niceFacing = T)
n = n + 220000
}
}
}
circos.text(chrom$size/2, 6, "T. fasciculata", sector.index="Tfas_chr11",col="olivedrab",cex=1, facing = "bending.inside")
DE_genes <- read.table("DE_genes.mapped_to_Tfas.ROBUSTonly.txt", header = T)
View(DE_genes)
DE_genes <- read.table("DE_genes.mapped_to_Tfas.ROBUSTonly.txt", header = T)
