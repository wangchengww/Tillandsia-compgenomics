geom_point(data=Tlei, colour="lightgoldenrod1") +
geom_point(data=Tlei_A, colour="gold2") +
ylab(label = "Percentage of reads mapping uniquely") +
xlab(label = "") + theme(legend.position="none")
rep(c(1),208)
map_rates$whatver <- rep(c(1),208)
ggplot(map_rates, aes(x= whatver, y = map_rate)) +
geom_violin(trim = FALSE) +
geom_point(data=Tlei, colour="lightgoldenrod1") +
geom_point(data=Tlei_A, colour="gold2") +
ylab(label = "Percentage of reads mapping uniquely") +
xlab(label = "") + theme(legend.position="none")
# Starting with a comparison of unique mapping rates across all three genomes, we compile this data into one set
map_rates <- cbind(t[,c(1,12)])
map_rates$whatever <- rep(c(1),208)
colnames(map_rates) <- c("sample", "map_rate")
# We also want to isolate the values for Tfas and Tlei individuals (with the assembled samples separate), so that we can
# highlight them in the plot to look at mapping bias towards samples of the same species.
Tlei_A <- map_rates[map_rates$sample == "T.leiboldiana_B1842" | map_rates$sample == "T.leiboldiana_B323",]
Tlei <- map_rates[map_rates$sample == "T.leiboldiana_GY146_XC"| map_rates$sample == "T.leiboldiana_GY142_XC",]
# Make violin plots of uniquely mapping rates
library(ggplot2)
ggplot(map_rates, aes(x= whatever, y = map_rate)) +
geom_violin(trim = FALSE) +
geom_point(data=Tlei, colour="lightgoldenrod1") +
geom_point(data=Tlei_A, colour="gold2") +
ylab(label = "Percentage of reads mapping uniquely") +
xlab(label = "") + theme(legend.position="none")
# Starting with a comparison of unique mapping rates across all three genomes, we compile this data into one set
map_rates <- cbind(t[,c(1,12)])
map_rates$whatever <- rep(c(1),208)
colnames(map_rates) <- c("sample", "map_rate", "whatever")
# We also want to isolate the values for Tfas and Tlei individuals (with the assembled samples separate), so that we can
# highlight them in the plot to look at mapping bias towards samples of the same species.
Tlei_A <- map_rates[map_rates$sample == "T.leiboldiana_B1842" | map_rates$sample == "T.leiboldiana_B323",]
Tlei <- map_rates[map_rates$sample == "T.leiboldiana_GY146_XC"| map_rates$sample == "T.leiboldiana_GY142_XC",]
# Make violin plots of uniquely mapping rates
library(ggplot2)
ggplot(map_rates, aes(x= whatever, y = map_rate)) +
geom_violin(trim = FALSE) +
geom_point(data=Tlei, colour="lightgoldenrod1") +
geom_point(data=Tlei_A, colour="gold2") +
ylab(label = "Percentage of reads mapping uniquely") +
xlab(label = "") + theme(legend.position="none")
ggplot(map_rates, aes(x= whatever, y = map_rate)) +
geom_violin(trim = FALSE) +
geom_point(data=Tlei, colour="lightgoldenrod1") +
geom_point(data=Tlei_A, colour="gold2") +
ylab(label = "Percentage of reads mapping to T.lei assembly") +
xlab(label = "") + theme(legend.position="none")
# Make violin plots of uniquely mapping rates
library(ggplot2)
ggplot(map_rates, aes(x= whatever, y = map_rate)) +
geom_violin(trim = FALSE) +
geom_point(data=Tlei, colour="lightgoldenrod1") +
geom_point(data=Tlei_A, colour="gold2") +
ylab(label = "Percentage of reads mapping to T.lei assembly") +
xlab(label = "") + theme(legend.position="none")
ggplot(map_rates, aes(x= whatever, y = map_rate)) +
geom_violin(trim = FALSE) +
geom_point(shape=16, colour = "Black") +
geom_point(data=Tlei, colour="lightgoldenrod1") +
geom_point(data=Tlei_A, colour="gold2") +
ylab(label = "Percentage of reads mapping to T.lei assembly") +
xlab(label = "") + theme(legend.position="none")
install.packages("circlize")
t <- read.table("bio-info_phd/alignment_report_Tlei_Bowtie2.txt", header = T)
r <- read.table("bio-info_phd/alignment_report_Tlei_Bowtie2_26scaffolds.txt", header = T)
t$mapping_rate <- (t$reads_mapped/(t$reads_total))*100
t$uniq_mapping_rate <- (t$uniquely_mapped/(t$reads_total))*100
t$multimapping_reads <- (t$reads_mapped - t$uniquely_mapped)
t$multimapping_p <- (t$multimapping_reads/(t$reads_total))*100
t$unmapped_p <- (t$reads_unmapped/(t$reads_total))*100
t$reads_surviving_MQ_p <- (t$surviving_MQ/(t$reads_total))*100
r$mapping_rate <- (r$reads_mapped/(r$reads_total))*100
r$uniq_mapping_rate <- (r$uniquely_mapped/(r$reads_total))*100
r$multimapping_reads <- (r$reads_mapped - r$uniquely_mapped)
r$multimapping_p <- (r$multimapping_reads/(r$reads_total))*100
r$unmapped_p <- (r$reads_unmapped/(r$reads_total))*100
r$reads_surviving_MQ_p <- (r$surviving_MQ/(r$reads_total))*100
mean(t$reads_total)
mean(r$reads_total)
mean(t$surviving_MQ)
mean(r$surviving_MQ)
mean(t$multimapping_reads)
mean(r$multimapping_reads)
View(r)
mean(t$multimapping_p)
mean(r$multimapping_p)
mean(t$unmapped_p)
mean(r$unmapped_p)
View(t)
# Comparison between mapping against full assembly and 26 scaffolds
map_rates2 <- cbind(t[,c(1,12)], r[,c(12)])
View(map_rates2)
colnames(map_rates2) <- c("species", "map_rates_all", "map_rates_26")
library(reshape2)
colnames(map_rates2) <- c("sample", "map_rates_all", "map_rates_26")
library(reshape2)
map_rates2_m <-melt(map_rates2, id.vars = c("sample"))
View(map_rates2)
View(map_rates2_m)
library(ggplot2)
ggplot(map_rates2_m, aes(x = variable, y = value, color = variable, fill =variable)) +
geom_violin(trim = FALSE) +
scale_fill_brewer(palette="Dark2") +
scale_color_brewer(palette="Dark2") +
geom_point(shape=16, colour = "Black") +
scale_x_discrete(labels=c("Full assembly", "26 scaffolds")) +
ylab(label = "Percentage of reads mapping uniquely") +
xlab(label = "") + theme(legend.position="none")
ggplot(map_rates2_m, aes(x = variable, y = value, color = variable, fill =variable)) +
geom_boxplot() +
scale_fill_brewer(palette="Dark2") +
scale_color_brewer(palette="Dark2") +
geom_point(shape=16, colour = "Black") +
scale_x_discrete(labels=c("Full assembly", "26 scaffolds")) +
ylab(label = "Percentage of reads mapping uniquely") +
xlab(label = "") + theme(legend.position="none")
ggplot(map_rates2_m, aes(x = variable, y = value, color = variable, fill =variable)) +
geom_boxplot() +
scale_color_brewer(palette="Dark2") +
geom_point(shape=16, colour = "Black") +
scale_x_discrete(labels=c("Full assembly", "26 scaffolds")) +
ylab(label = "Percentage of reads mapping uniquely") +
xlab(label = "") + theme(legend.position="none")
ggplot(map_rates2_m, aes(x = variable, y = value, color = variable, fill =variable)) +
geom_boxplot() +
scale_fill_brewer(palette="Dark2") +
scale_color_brewer(colour = "Black") +
geom_point(shape=16, colour = "Black") +
scale_x_discrete(labels=c("Full assembly", "26 scaffolds")) +
ylab(label = "Percentage of reads mapping uniquely") +
xlab(label = "") + theme(legend.position="none")
ggplot(map_rates2_m, aes(x = variable, y = value, color = variable, fill =variable)) +
geom_boxplot() +
scale_fill_brewer(palette="Dark2") +
geom_point(shape=16, colour = "Black") +
scale_x_discrete(labels=c("Full assembly", "26 scaffolds")) +
ylab(label = "Percentage of reads mapping uniquely") +
xlab(label = "") + theme(legend.position="none")
ggplot(map_rates2_m, aes(x = variable, y = value, color = variable, fill =variable)) +
geom_boxplot() +
scale_fill_brewer(palette="Dark2") +
scale_x_discrete(labels=c("Full assembly", "26 scaffolds")) +
ylab(label = "Percentage of reads mapping uniquely") +
xlab(label = "") + theme(legend.position="none")
ggplot(map_rates2_m, aes(x = variable, y = value, fill =variable)) +
geom_boxplot() +
scale_fill_brewer(palette="Dark2") +
geom_point(shape=16, colour = "Black") +
scale_x_discrete(labels=c("Full assembly", "26 scaffolds")) +
ylab(label = "Percentage of reads mapping uniquely") +
xlab(label = "") + theme(legend.position="none")
View(r)
survival_rates2 <- cbind(t[,c(1,17)], r[,c(17)])
colnames(survival_rates2) <- c("sample", "surv_rates_all", "surv_rates_26")
library(reshape2)
survival_rates2_m <-melt(survival_rates2, id.vars = c("sample"))
library(ggplot2)
ggplot(survival_rates2_m, aes(x = variable, y = value, fill =variable)) +
geom_boxplot() +
scale_fill_brewer(palette="Dark2") +
geom_point(shape=16, colour = "Black") +
scale_x_discrete(labels=c("Full assembly", "26 scaffolds")) +
ylab(label = "Percentage of reads mapping uniquely") +
xlab(label = "") + theme(legend.position="none")
multi_rates2 <- cbind(t[,c(1,15)], r[,c(15)])
colnames(multi_rates2) <- c("sample", "multi_rates_all", "multi_rates_26")
library(reshape2)
multi_rates2_m <-melt(multi_rates2, id.vars = c("sample"))
library(ggplot2)
ggplot(multi_rates2_m, aes(x = variable, y = value, fill =variable)) +
geom_boxplot() +
scale_fill_brewer(palette="Dark2") +
geom_point(shape=16, colour = "Black") +
scale_x_discrete(labels=c("Full assembly", "26 scaffolds")) +
ylab(label = "Percentage of reads mapping uniquely") +
xlab(label = "") + theme(legend.position="none")
ggplot(survival_rates2_m, aes(x = variable, y = value, fill =variable)) +
geom_boxplot() +
scale_fill_brewer(palette="Dark2") +
geom_point(shape=16, colour = "Black") +
scale_x_discrete(labels=c("Full assembly", "26 scaffolds")) +
ylab(label = "Percentage of reads with MQ > 20") +
xlab(label = "") + theme(legend.position="none")
mean(t$surviving_MQ)
mean(t$reads_surviving_MQ_p)
mean(r$reads_surviving_MQ_p)
mean(t$multimapping_p)
mean(r$multimapping_p)
mean(t$unmapped_p)
mean(r$unmapped_p)
r <- read.table("bio-info_phd/alignment_report_Tlei_Bowtie2_26scaffolds.txt", header = T)
r$mapping_rate <- (r$reads_mapped/(r$reads_total))*100
r$uniq_mapping_rate <- (r$uniquely_mapped/(r$reads_total))*100
r$multimapping_reads <- (r$reads_mapped - r$uniquely_mapped)
r$multimapping_p <- (r$multimapping_reads/(r$reads_total))*100
r$unmapped_p <- (r$reads_unmapped/(r$reads_total))*100
r$reads_surviving_MQ_p <- (r$surviving_MQ/(r$reads_total))*100
View(r)
mean(r$reads_total)
mean(r$surviving_MQ)
mean(r$multimapping_p)
mean(r$unmapped_p)
mean(r$error_rate)
mean(r$duplication_per)
mean(r$uniquely_mapped_p)
mean(r$uniq_mapping_rate)
mean(r$reads_surviving_MQ_p)
t <- read.table("bio-info_phd/alignment_report_Tlei_Bowtie2.txt", header = T)
t$mapping_rate <- (t$reads_mapped/(t$reads_total))*100
t$uniq_mapping_rate <- (t$uniquely_mapped/(t$reads_total))*100
t$multimapping_reads <- (t$reads_mapped - t$uniquely_mapped)
t$multimapping_p <- (t$multimapping_reads/(t$reads_total))*100
t$unmapped_p <- (t$reads_unmapped/(t$reads_total))*100
t$reads_surviving_MQ_p <- (t$surviving_MQ/(t$reads_total))*100
mean(t$surviving_MQ)
mean(t$reads_surviving_MQ_p)
View(t)
View(r)
mean(t$surviving_MQ)
mean(t$uniq_mapping_rate)
mean(t$multimapping_p)
mean(t$unmapped_p)
mean(t$error_rate)
mean(t$duplication_per)
r <- read.table("bio-info_phd/alignment_report_Tlei_Bowtie2_26scaffolds.txt", header = T)
species <- substr(r$ind, 3, 5)
r$species <- species
r$mapping_rate <- (r$reads_mapped/(r$reads_total))*100
r$uniq_mapping_rate <- (r$uniquely_mapped/(r$reads_total))*100
r$multimapping_reads <- (r$reads_mapped - r$uniquely_mapped)
r$multimapping_p <- (r$multimapping_reads/(r$reads_total))*100
r$unmapped_p <- (r$reads_unmapped/(r$reads_total))*100
r$reads_surviving_MQ_p <- (r$surviving_MQ/(r$reads_total))*100
# Make boxplots of mapping rates
# Make color palette
library(RColorBrewer)
nb.cols <- 22
mycolors <- colorRampPalette(brewer.pal(8, "Dark2"))(nb.cols)
r$species <- species
View(r)
species <- substr(r$ind, 3, 5)
r$species <- species
View(r)
species
r$species
# Same for survival rate (high quality, uniquely mapping reads)
survival_counts <- cbind(r[,c(1,12,10)])
View(survival_counts)
colnames(survival_rates) <- c("sample", "species", "Survival_reads")
colnames(survival_counts) <- c("sample", "species", "Survival_reads")
ggplot(survival_counts, aes(x = species, y = Survival_rate, color = species)) +
geom_boxplot() +
geom_jitter(shape=16, position=position_jitter(0.2)) +
ylab(label = "Percentage of reads with MQ > 20 to T.lei assembly") +
xlab(label = "Species") +
theme(legend.position="none") +
scale_fill_manual(values = mycolors) +
scale_color_manual(values = mycolors)
# Make boxplots of uniquely mapping rates
library(ggplot2)
ggplot(survival_counts, aes(x = species, y = Survival_rate, color = species)) +
geom_boxplot() +
geom_jitter(shape=16, position=position_jitter(0.2)) +
ylab(label = "Percentage of reads with MQ > 20 to T.lei assembly") +
xlab(label = "Species") +
theme(legend.position="none") +
scale_fill_manual(values = mycolors) +
scale_color_manual(values = mycolors)
ggplot(survival_counts, aes(x = species, y = Survival_reads, color = species)) +
geom_boxplot() +
geom_jitter(shape=16, position=position_jitter(0.2)) +
ylab(label = "Percentage of reads with MQ > 20 to T.lei assembly") +
xlab(label = "Species") +
theme(legend.position="none") +
scale_fill_manual(values = mycolors) +
scale_color_manual(values = mycolors)
ggplot(survival_counts, aes(x = species, y = Survival_reads, color = species)) +
geom_boxplot() +
geom_jitter(shape=16, position=position_jitter(0.2)) +
ylab(label = "Number of reads with MQ > 20 to T.lei26 assembly") +
xlab(label = "Species") +
theme(legend.position="none") +
scale_fill_manual(values = mycolors) +
scale_color_manual(values = mycolors)
r <- read.table("bio-info_phd/alignment_report_Tlei_Bowtie2_26scaffolds.txt", header = T)
View(r)
species <- substr(r$ind, 3, 5)
r$species <- species
r$mapping_rate <- (r$reads_mapped/(r$reads_total))*100
r$uniq_mapping_rate <- (r$uniquely_mapped/(r$reads_total))*100
r$multimapping_reads <- (r$reads_mapped - r$uniquely_mapped)
r$multimapping_p <- (r$multimapping_reads/(r$reads_total))*100
r$unmapped_p <- (r$reads_unmapped/(r$reads_total))*100
r$reads_surviving_MQ_p <- (r$surviving_MQ/(r$reads_total))*100
r$reads_surviving_not_DP <- r$surviving_MQ*(1-r$duplication_per)
mmean(r$reads_surviving_not_DP)
mean(r$reads_surviving_not_DP)
library(ggplot2)
## To remove individuals with low data quality / amount
boxplot(r$reads_surviving_not_DP)
ggplot(r, aes(x = "", y = reads_surviving_not_DP,)) +
geom_boxplot()
ggplot(r, aes(x = "", y = reads_surviving_not_DP,)) +
geom_boxplot()  +
geom_point(shape=16, colour = "Black") +
ylab(label = "Number of non-duplicate, surviving reads") +
xlab(label = "") + theme(legend.position="none")
ggplot(r, aes(x = "", y = reads_surviving_not_DP,)) +
geom_boxplot()  +
geom_point(shape=16, colour = "Black") +
ylab(label = "Number of non-duplicate, surviving reads") +
geom_line(y = 500000)
ggplot(r, aes(x = "", y = reads_surviving_not_DP,)) +
geom_boxplot()  +
geom_point(shape=16, colour = "Black") +
ylab(label = "Number of non-duplicate, surviving reads") +
geom_hline(yintercept=500000) +
xlab(label = "") + theme(legend.position="none")
ggplot(r, aes(x = "", y = reads_surviving_not_DP,)) +
geom_boxplot()  +
geom_jitter(shape=16, colour = "Black") +
ylab(label = "Number of non-duplicate, surviving reads") +
geom_hline(yintercept=500000) +
xlab(label = "") + theme(legend.position="none")
setwd('/Users/clara/Documents/GitHub/Tillandsia-compgenomics/Supplementary_figures/Assembly_stats/')
tfas_fai <- read.delim("tillandsia_fasciculata_assembly.sorted.fasta.fai", sep = "\t",
header = F)
View(tfas_fai)
tfas_fai <- read.delim("tillandsia_fasciculata_assembly.sorted.fasta.fai", sep = "\t",
header = F, colClasses = c(NA, NA, "NULL", "NULL", "NULL"))
tfas_fai <- read.delim("tillandsia_fasciculata_assembly.sorted.fasta.fai", sep = "\t",
header = F, colClasses = c(NA, NA, "NULL", "NULL", "NULL"),
col.names = c("Scaffolds", "length"))
tfas_fai <- read.delim("tillandsia_fasciculata_assembly.sorted.fasta.fai", sep = "\t",
header = F, colClasses = c(NA, NA, "NULL", "NULL", "NULL"),
col.names = c("Scaffolds", "length", "NULL", "NULL", "NULL"))
View(tfas_fai)
tlei_fai <- read.delim("tillandsia_leiboldiana_assembly.pilon.upper.sorted.fasta.fai", sep = "\t",
header = F, colClasses = c(NA, NA, "NULL", "NULL", "NULL"),
col.names = c("Scaffolds", "length", "NULL", "NULL", "NULL"))
library(ggplot2)
ggplot(tfas_fai, aes(x=length)) + geom_histogram()
ggplot(tfas_fai, aes(x=length)) + geom_histogram(bins = 100)
ggplot(tfas_fai, aes(x=length)) + geom_histogram(bins = 300)
ggplot(tfas_fai, aes(x=length)) + geom_histogram(bins = 400)
ggplot(tfas_fai, aes(x=Scaffold, y=length)) +
geom_bar(stat="identity")
tfas_fai <- read.delim("tillandsia_fasciculata_assembly.sorted.fasta.fai", sep = "\t",
header = F, colClasses = c(NA, NA, "NULL", "NULL", "NULL"),
col.names = c("Scaffold", "length", "NULL", "NULL", "NULL"))
tlei_fai <- read.delim("tillandsia_leiboldiana_assembly.pilon.upper.sorted.fasta.fai", sep = "\t",
header = F, colClasses = c(NA, NA, "NULL", "NULL", "NULL"),
col.names = c("Scaffold", "length", "NULL", "NULL", "NULL"))
ggplot(tfas_fai, aes(x=Scaffold, y=length)) +
geom_bar(stat="identity")
ggplot(tfas_fai, aes(x=factor(Scaffold, levels = rev(stats::reorder(Scaffold, length))),
y=length)) +
geom_bar(stat="identity")
ggplot(tfas_fai, aes(x=factor(Scaffold, levels = rev(stats::reorder(Scaffold, -length))),
y=length)) +
geom_bar(stat="identity")
ggplot(tfas_fai,
aes(x=factor(Scaffold, levels = rev(stats::reorder(Scaffold, length))),
y=length)) +
geom_bar(stat="identity") +
scale_x_discrete(limits=rev)
ggplot(tfas_fai,
aes(x=factor(Scaffold, levels = rev(stats::reorder(Scaffold, length))),
y=length)) +
geom_bar(stat="identity") +
scale_x_discrete(limits=rev) +
theme(axis.text.x=element_blank(),
axis.ticks.x=element_blank())
ylab("Scaffold length (bp)"
ylab("Scaffold length (bp)" +
ggplot(tfas_fai,
aes(x=factor(Scaffold, levels = rev(stats::reorder(Scaffold, length))),
y=length)) +
geom_bar(stat="identity") +
scale_x_discrete(limits=rev) +
xlab("Assembly scaffolds by decreasing size") +
ylab("Scaffold length (bp)") +
theme(axis.text.x=element_blank(),
axis.ticks.x=element_blank())
ggplot(tlei_fai,
aes(x=factor(Scaffold, levels = rev(stats::reorder(Scaffold, length))),
y=length)) +
geom_bar(stat="identity") +
scale_x_discrete(limits=rev) +
xlab("Assembly scaffolds by decreasing size") +
ylab("Scaffold length (bp)") +
theme(axis.text.x=element_blank(),
axis.ticks.x=element_blank())
ggplot(tfas_fai,
aes(x=factor(Scaffold, levels = rev(stats::reorder(Scaffold, length))),
y=length)) +
geom_bar(stat="identity") +
scale_x_discrete(limits=rev) +
xlab("Assembly scaffolds by decreasing size") +
ylab("Scaffold length (bp)") +
theme(axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +
xlim(c(0,30))
rev(stats::reorder(Scaffold, length))
rev(stats::reorder(tfas_fai$Scaffold, tfas_fai$length))
rev(stats::reorder(tfas_fai$Scaffold, -tfas_fai$length))
rev(stats::reorder(tfas_fai$Scaffold, -tfas_fai$length))[1:30]
rev(stats::reorder(tfas_fai$Scaffold, tfas_fai$length))[1:30]
rev(stats::reorder(tfas_fai$Scaffold, tfas_fai$length))[-1:-30]
tail(rev(stats::reorder(tfas_fai$Scaffold, tfas_fai$length)),30)
ggplot(tfas_fai,
aes(x=factor(Scaffold, levels = rev(stats::reorder(Scaffold, length))),
y=length)) +
geom_bar(stat="identity") +
scale_x_discrete(limits=tail(rev(stats::reorder(tfas_fai$Scaffold, tfas_fai$length)),30)) +
xlab("Assembly scaffolds by decreasing size") +
ylab("Scaffold length (bp)") +
theme(axis.text.x=element_blank(),
axis.ticks.x=element_blank())
ggplot(tfas_fai,
aes(x=factor(Scaffold, levels = rev(stats::reorder(Scaffold, length))),
y=length)) +
geom_bar(stat="identity") +
scale_x_discrete(limits=rev(tail(rev(stats::reorder(tfas_fai$Scaffold, tfas_fai$length)),30))) +
xlab("Assembly scaffolds by decreasing size") +
ylab("Scaffold length (bp)") +
theme(axis.text.x=element_blank(),
axis.ticks.x=element_blank())
ggplot(tfas_fai,
aes(x=factor(Scaffold, levels = rev(stats::reorder(Scaffold, length))),
y=length)) +
geom_bar(stat="identity") +
scale_x_discrete(limits=(tail(stats::reorder(tfas_fai$Scaffold, tfas_fai$length)),30))) +
ggplot(tfas_fai,
aes(x=factor(Scaffold, levels = rev(stats::reorder(Scaffold, length))),
y=length)) +
geom_bar(stat="identity") +
scale_x_discrete(limits=(tail(stats::reorder(tfas_fai$Scaffold, tfas_fai$length)),30)) +
ggplot(tfas_fai,
aes(x=factor(Scaffold, levels = rev(stats::reorder(Scaffold, length))),
y=length)) +
geom_bar(stat="identity") +
scale_x_discrete(limits=(tail(stats::reorder(tfas_fai$Scaffold, tfas_fai$length),30))) +
xlab("Assembly scaffolds by decreasing size") +
ylab("Scaffold length (bp)") +
theme(axis.text.x=element_blank(),
axis.ticks.x=element_blank())
ggplot(tfas_fai,
aes(x=factor(Scaffold, levels = rev(stats::reorder(Scaffold, length))),
y=length)) +
geom_bar(stat="identity") +
scale_x_discrete(limits=rev(tail(rev(stats::reorder(tfas_fai$Scaffold, tfas_fai$length)),30))) +
xlab("Assembly scaffolds by decreasing size") +
ylab("Scaffold length (bp)") +
theme(axis.text.x=element_blank(),
axis.ticks.x=element_blank())
ggplot(tfas_fai,
aes(x=factor(Scaffold, levels = rev(stats::reorder(Scaffold, length))),
y=length)) +
geom_bar(stat="identity") +
scale_x_discrete(limits=rev(tail(rev(stats::reorder(tfas_fai$Scaffold, tfas_fai$length)),50))) +
xlab("Assembly scaffolds by decreasing size") +
ylab("Scaffold length (bp)") +
theme(axis.text.x=element_blank(),
axis.ticks.x=element_blank())
p1a <- ggplot(tfas_fai,
aes(x=factor(Scaffold, levels = rev(stats::reorder(Scaffold, length))),
y=length)) +
geom_bar(stat="identity", fill="olivedrab") +
scale_x_discrete(limits=rev) +
xlab("Assembly scaffolds by decreasing size") +
ylab("Scaffold length (bp)") +
theme(axis.text.x=element_blank(),
axis.ticks.x=element_blank())
p1b <- ggplot(tfas_fai,
aes(x=factor(Scaffold, levels = rev(stats::reorder(Scaffold, length))),
y=length)) +
geom_bar(stat="identity", fill="olivedrab") +
scale_x_discrete(limits=rev(tail(rev(stats::reorder(tfas_fai$Scaffold, tfas_fai$length)),50))) +
xlab("Assembly scaffolds by decreasing size") +
ylab("Scaffold length (bp)") +
theme(axis.text.x=element_blank(),
axis.ticks.x=element_blank())
p1 <- p1a + annotation_custom(ggplotGrob(p2b), xmin = 5, xmax = 6.5,
ymin = -6.75, ymax = -4.25)
p1 <- p1a + annotation_custom(ggplotGrob(p1b), xmin = 5, xmax = 6.5,
ymin = -6.75, ymax = -4.25)
p1
p1a + annotation_custom(ggplotGrob(p1b), xmin = 100, xmax = 150,
ymin = 1000, ymax = 1050)
p1a + annotation_custom(ggplotGrob(p1b), xmin = 1000, xmax = 1500,
ymin = 20000000, ymax = 30000000)
p1a + annotation_custom(ggplotGrob(p1b), xmin = 500, xmax = 1500,
ymin = 10000000, ymax = 30000000)
p1a + annotation_custom(ggplotGrob(p1b), xmin = 300, xmax = 1800,
ymin = 5000000, ymax = 30000000)
p1b <- ggplot(tfas_fai,
aes(x=factor(Scaffold, levels = rev(stats::reorder(Scaffold, length))),
y=length)) +
geom_bar(stat="identity", fill="olivedrab") +
scale_x_discrete(limits=rev(tail(rev(stats::reorder(tfas_fai$Scaffold, tfas_fai$length)),50))) +
xlab("") +
ylab("") +
theme(axis.text.x=element_blank(),
axis.ticks.x=element_blank())
p1a + annotation_custom(ggplotGrob(p1b), xmin = 300, xmax = 1800,
ymin = 5000000, ymax = 30000000)
p1a + annotation_custom(ggplotGrob(p1b), xmin = 300, xmax = 2000,
ymin = 2000000, ymax = 30000000)
